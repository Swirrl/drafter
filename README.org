* Drafter

A RESTful Clojure web service to support PMD's admin tool in moving
data updates between draft and live triple stores.

Be sure to see the [[https://github.com/Swirrl/drafter/blob/master/doc/getting-started.org][Getting Started Guide]] for how to use Drafter and
set up your Dev environment.

** Configuring Drafter

Drafter uses [[https://github.com/weavejester/environ][environ]] for its configuration.  This means it uses
environment variables (and/or java properties) to pass configuration
variables from the environment.

The defaults should work for most cases, but for further details on
the options drafter supports you should see the [[https://github.com/Swirrl/drafter/blob/master/doc/configuring-drafter.org][Configuring Drafter]]
page.

 You may also wish to configure drafter logging by putting a
=log-config.edn= file in drafters working directory.  We provide an
example file you can modify at [[https://github.com/Swirrl/drafter/blob/master/log-config.edn.example][log-config.edn.example]].

** Drafter's SPARQL Endpoints

Drafter provides four [[http://www.w3.org/TR/sparql11-protocol/][SPARQL]] endpoints for querying they are:

- The Live (or public) endpoint
- The Draft endpoint
- The State endpoint
- The Raw endpoint

=GET | POST /sparql/state?query=select * FROM...=

SPARQL endpoint on state graph only:

=GET | POST /sparql/live?query=select * FROM...=

SPARQL endpoint on live union graph only (drafter to check state
graph on each request to know what this is).

=GET | POST /sparql/draft?graph=GURI1&graph=GURI2...&query=select * FROM...=

SPARQL endpoint on an arbitrary set of drafts (plus the rest from live).

If on the draft graph you want the drafts to be unioned with the
current state of the public live graphs then you should also pass the
HTTP parameter =&union-with-live=true=.  The default value for this is
false.

** Graph Management Operations
*** Create a new draft

| Verbs | Route           | Synchronous | Priority        |
|-------+-----------------+-------------+-----------------|
| POST  | =/draft/create= | Yes         | =0 :sync-write= |

This route synchronously creates a new draft and returns the =GURI=
(Graph URI) of the draft graph in its response object.

It accepts the following parameters:

| Parameter    | Required | Description                                                             |
|--------------+----------+-------------------------------------------------------------------------|
| =live-graph= | Yes      | The Graph URI of the live graph that this is a draft graph of.          |
| =meta-???=   | No       | Key/Value pair for metadata to attach to this draft in the state graph. |

#+BEGIN_SRC http :exports both
POST http://localhost:3001/draft/create?live-graph=http://swirrl.com/graph/mission-statement
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 200 OK
Date: Wed, 04 Mar 2015 17:20:59 GMT
Content-Length: 79
Content-Type: application/json; charset=utf-8
Server: Jetty(7.6.13.v20130916)

{
  "guri": "http:\/\/publishmydata.com\/graphs\/drafter\/draft\/c1026ac2-81cf-4aa8-97d5-5eb945ef03a5",
  "type": "ok"
}
#+end_example

*** Append a draft with graph with triples from a file

| Verbs | Route    | Synchronous | Priority           |
|-------+----------+-------------+--------------------|
| POST  | =/draft= | No          | =1 :batched-write= |

Asynchronously schedules a request to append or replace the specified
draft graph with the contents of the provided RDF file.

Enqueues an append of the contents of the draft graph with the file
data.

It accepts the following parameters:

| Parameter  | Required | Description                                                                                                                  |
|------------+----------+------------------------------------------------------------------------------------------------------------------------------|
| =graph=    | Yes      | The URI of the draft graph you wish to append/replace into.                                                                  |
| =meta-???= | No       | Key/Value pair of metadata to attach to this draft in the state graph.  It will be applied with the batched write operation. |

Must contain the file of triples with a correct mime-type.

The file must be supplied as multi-part-form data under the key =file=.

Returns a 202 if enqueued successfully, with a JSON response
containing a path segment for the client to poll for the status of the
job.

#+BEGIN_SRC http :exports both
POST http://localhost:3001/draft?graph=http://publishmydata.com/graphs/drafter/draft/c1026ac2-81cf-4aa8-97d5-5eb945ef03a5
Content-Type: multipart/form-data; boundary=AaB03x

--AaB03x
Content-Disposition: form-data; name="file"; filename="mission-statement.nt"
Content-Type: application/n-triples

<http://swirrl.com/mission-statement> <http://swirrl.com/published-facts> 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 .
--AaB03x--
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 202 Accepted
Date: Wed, 04 Mar 2015 17:20:59 GMT
Content-Length: 79
Content-Type: application/json; charset=utf-8
Server: Jetty(7.6.13.v20130916)

{
"type": "ok",
"finished-job": "/status/finished-jobs/2b9b5c60-f5f7-4141-b21f-592886b98791"
}
#+end_example

*** Append live graph data into draft

| Verbs | Route              | Synchronous | Priority           |
|-------+--------------------+-------------+--------------------|
| POST  | =/draft/copy-live= | No          | =1 :batched-write= |

Appends all data from the associated live graph into a draft graph.

It accepts the following parameter:

| Parameter  | Required | Description                                                                    |
|------------+----------+--------------------------------------------------------------------------------|
| =graph=    | Yes      | The URI of the draft graph you wish to populate from the associated live graph |


*** Create/Update draft metadata

| Verbs  | Route             | Synchronous | Priority           |
|--------+-------------------+-------------+--------------------|
| POST   | =/metadata=       | Yes         | =0 :sync-write=    |

Updates or creates metadata for a set of draft graphs.
This route allows draft metadata only to be updated without needing
to construct an append request with an empty set of triples.

It accepts the following parameters:

| Parameter | Required | Description                                               |
|-----------+----------+-----------------------------------------------------------|
| =graph=   | Yes      | One or more draft graphs to associate the metadata with.  |
| =meta-?=  | Yes      | One or more key/value pairs to associate with each graph. |

Multiple graphs can be specified and each will be associated with the metadata defined
by the collection of meta-[key]=value pairs in the query string.

*** Delete draft metadata

| Verbs  | Route             | Synchronous | Priority           |
|--------+-------------------+-------------+--------------------|
| DELETE | =/metadata=       | Yes         | =0 :sync-write=    |

Deletes all metadata keys associated with a collection of graphs from the state graph.


| Parameter  | Required | Description                                       |
|------------+----------+---------------------------------------------------|
| =graph=    | Yes      | One or more draft graphs to delete metadata from. |
| =meta-key= | Yes      | One or more keys to delete from each graph.       |


*** Delete draft contents

| Verbs  | Route             | Synchronous | Priority           |
|--------+-------------------+-------------+--------------------|
| DELETE | =/draft/contents= | Yes         | =1 :batched-write= |

Enqueues a delete of the specified draft graph.

Information from the state graph is not removed, allowing users to retain the
same draft graph URI and graph metadata.

It accepts the following parameters:

| Parameter | Required | Description                                                   |
|-----------+----------+---------------------------------------------------------------|
| =graph=   | Yes      | The URI of the graph (live or draft) that you wish to delete. |


Returns a 202 if enqueued successfully, with the =job-id= in the response
body:

#+BEGIN_SRC http :exports both
DELETE http://localhost:3001/draft/contents?graph=http://publishmydata.com/graphs/drafter/draft/c1026ac2-81cf-4aa8-97d5-5eb945ef03a5
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 202 Accepted
Date: Wed, 04 Mar 2015 17:20:59 GMT
Content-Length: 79
Content-Type: application/json; charset=utf-8
Server: Jetty(7.6.13.v20130916)

{"type":"ok","finished-job":"/status/finished-jobs/684bb438-09a8-418b-9537-6ce7e6d2f0ee"}
#+end_example

*** Delete draft graph (both state and contents)

| Verbs  | Route    | Synchronous | Priority           |
|--------+----------+-------------+--------------------|
| DELETE | =/graph= | Yes         | =1 :batched-write= |

Enqueues a delete of the specified draft graph, removing both its state graph
entry and its graph contents.

As far as PMD is concerned this operation essentially means remove the changes
in this =draft-graph= from my =draftset= i.e. restore this draft graph to its
current live graph.

It accepts the following parameters:

| Parameter | Required | Description                                         |
|-----------+----------+-----------------------------------------------------|
| =graph=   | Yes      | The URI of the draft graph that you wish to delete. |

Returns a 202 if enqueued successfully, with the =job-id= in the response body:

#+BEGIN_SRC http :exports both
DELETE http://localhost:3001/graph?graph=http://publishmydata.com/graphs/drafter/draft/c1026ac2-81cf-4aa8-97d5-5eb945ef03a5
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 202 Accepted
Date: Wed, 04 Mar 2015 17:20:59 GMT
Content-Length: 79
Content-Type: application/json; charset=utf-8
Server: Jetty(7.6.13.v20130916)

{"type":"ok","finished-job":"/status/finished-jobs/684bb438-09a8-418b-9537-6ce7e6d2f0ee"}
#+end_example

*** Making a draft live

| Verbs  | Route         | Synchronous | Priority             |
|--------+---------------+-------------+----------------------|
| DELETE | =/graph/live= | No          | =2 :exclusive-write= |

Enqueues a transactional migration the specified graph(s) from draft
to live.

If you wish to make multiple graphs live at once, simply supply
multiple graph arguments, these should all be scheduled together to
occur in a single transaction e.g.

It accepts the following parameters:

| Parameter | Required | Description                                     |
|-----------+----------+-------------------------------------------------|
| =graph=   | Yes      | The Draft graph URI that you wish to make live. |

NOTE you can also supply any number of =&graph= parameters, and all
graphs will be made live within the same atomic transaction.

This replaces the content of the live graph with the draft one,
removing the draft afterwards.  It also sets the graphs isPublic
status to true.

Returns a 202 if enqueued successfully, with the =queue-id= in the
response body

#+BEGIN_SRC http :exports both
PUT http://localhost:3001/graph/live?graph=http://publishmydata.com/graphs/drafter/draft/20091554-af8b-46da-a04a-474db49e2166
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 202 Accepted
Date: Wed, 04 Mar 2015 17:20:59 GMT
Content-Length: 79
Content-Type: application/json; charset=utf-8
Server: Jetty(7.6.13.v20130916)

{
  "finished-job": "\/status\/finished-jobs\/45d6d24f-18ca-46ca-8172-de8c8a99dd51",
  "type": "ok"
}
#+end_example

*** Dumps End Points

For each of its endpoints drafter supports a dumps endpoint, for
retrieving data in the requested graph serialisation.  The endpoints
are at the following locations:

| Verbs | Route         | Synchronous |
|-------+---------------+-------------|
| GET   | =/data/draft= | Yes         |
| GET   | =/data/live=  | Yes         |
| GET   | =/data/raw=   | Yes         |

Each of these endpoints supports a =graph-uri= parameter to specify
which graph you wish to retrieve the data for.

It accepts the following parameters:

| Parameter         | Required | Description                                                       |
|-------------------+----------+-------------------------------------------------------------------|
| =graph-uri=       | Yes      | The URI that you want a data dump of.                             |

Any supported graph serialisation can be selected by setting the
accept header to the desired mime/type e.g. =application/n-triples=.

Each of these endpoints should additionally support all of the
behaviours and options of the endpoints that they wrap.  This is most
relevant for the drafts endpoint.

#+BEGIN_SRC http :exports both
GET http://localhost:3001/data/live?graph-uri=http://example.org/graph/one
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 200 OK
Date: Wed, 04 Mar 2015 17:55:18 GMT
Content-Disposition: attachment; filename="one.nt"
Content-Type: application/n-triples
Content-Length: 0
Server: Jetty(7.6.13.v20130916)

... content ...
#+end_example

*** Draft Dumps End Point

The draft dumps endpoint is unlike the others in that it supports the
following additional options inherited from its query endpoint:

| Parameter         | Required | Description                                                       |
|-------------------+----------+-------------------------------------------------------------------|
| =graph=           | No       | Used to specify the draft set.  Supported on draft endpoint only. |
| =union-with-live= | No       | Supported on draft endpoint only                                  |

Unlike the others the draft endpoint should be given the live graph
URI along with =graph= parameters that specify the draft set.  NOTE
you can supply just the draft graph for the desired live graph.

#+BEGIN_SRC http :exports both
GET http://localhost:3001/data/draft?graph-uri=http://example.org/graph/one&graph=http://example.org/graph/one
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 200 OK
Date: Wed, 04 Mar 2015 17:55:30 GMT
Content-Disposition: attachment; filename="one.nt"
Content-Type: application/n-triples
Content-Length: 0
Server: Jetty(7.6.13.v20130916)

... content ...
#+end_example

*** Polling for finished jobs

| Verbs | Route                         | Synchronous |
|-------+-------------------------------+-------------|
| GET   | =/status/finished-jobs/:uuid= | Yes         |

This route takes no query parameters.

When the job has finished the route will return a =200 OK= response
along with a success or error object associated with the job.

#+BEGIN_SRC http :results both
GET http://localhost:3001/status/finished-jobs/684bb438-09a8-418b-9537-6ce7e6d2f0ee
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 200 OK
Date: Wed, 04 Mar 2015 18:00:12 GMT
Content-Length: 13
Content-Type: application/json; charset=utf-8
Server: Jetty(7.6.13.v20130916)

{"type":"ok"}
#+end_example

In the case where the job is enqueued or is being processed i.e. it is
unfinished this route will return a 404:

#+BEGIN_SRC http :results both
GET http://localhost:3001/status/finished-jobs/711b438-09a8-418b-9537-6ce7e6d2faaa
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 404 Not Found
Date: Wed, 04 Mar 2015 18:08:45 GMT
Content-Length: 67
Content-Type: application/json; charset=utf-8
Server: Jetty(7.6.13.v20130916)

{"type":"not-found","message":"The specified job-id was not found"}
#+end_example

*** Querying the write-lock status

| Verbs | Route                    | Synchronous |
|-------+--------------------------+-------------|
| GET   | =/status/writes-locked/= | Yes         |

This route returns the boolean result indicating whether writes are
exclusively locked.

#+BEGIN_SRC http
GET http://localhost:3001/status/writes-locked
#+END_SRC

#+RESULTS:
#+begin_example
HTTP/1.1 200 OK
Date: Thu, 05 Mar 2015 00:38:15 GMT
Content-Type: text/html;charset=UTF-8
Content-Length: 5
Server: Jetty(7.6.13.v20130916)

false
#+end_example

*** TODO Add restart id to finished-jobs route
** Data Model

This is an alternative model to that written up by Ric.  It is
also different from what I was originally pitching.  The
key difference is that it models both live and draft graphs.
Whilst you can get away with less, Ric was right doing so feels
unnatural and asymetrical.  Hopefully this approach is intuitive
and symetrical!

In the db, we'll have a (private) 'state' graph which stores
details of the state of each graph.  The state graph and all
other graphs will be stored within the same triple store.
Some points to note about this approach:

- A hasDraft predicate associates a live graph with many drafts.
- The union of all live graphs can be obtained with the query:

#+BEGIN_SRC sparql :exports code
  SELECT ?live WHERE {
     ?live a drafter:ManagedGraph ;
             drafter:isPublic true .
  }
#+END_SRC

- When drafts are migrated into the "live" graph their entries
  and associations are removed from the state graph.

- The is:Public boolean lets you toggle whether the "live" graph
  is actually online and publicly accessible, and do so
  independently of creating a new graph.

#+BEGIN_SRC ttl
      <http://example.org/graph/live/1>
         a            drafter:ManagedGraph ;
         <created-at> "DateTime" ;
         <isPublic>  false ;
         <hasDraft> <http://drafter.swirrl.com/draft/graph/GUID-123> ;
                        a drafter:DraftGraph ;
                        <owner> "bob" ;
                        <updated-at> "DateTime" .
         <hasDraft> <http://drafter.swirrl.com/draft/graph/GUID-124> ;
                        a drafter:DraftGraph ;
                        <owner> "joe" ;
                        <updated-at> "DateTime" .

      # this is a graph with no draft changes
      <http://example.org/graph/live/1>
         a            drafter:ManagedGraph ;
         <isPublic>  true ;
         <created-at> "DateTime" .
#+END_SRC

** Other notes

Drafter doesn't know the difference between metadata graphs
and data graphs. It just moves data around and between states.
That's up to PMD to orchestrate.
