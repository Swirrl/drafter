RequestUnit               ::= QueryUnit | UpdateUnit
QueryUnit                 ::= Query
Query                     ::= Prologue _ ( SelectQuery | ConstructQuery | DescribeQuery | AskQuery ) _ ValuesClause
UpdateUnit                ::= Update
Prologue                  ::= ( BaseDecl | PrefixDecl )*
BaseDecl                  ::= 'BASE' _ IRIREF
PrefixDecl                ::= 'PREFIX' _ PNAME_NS IRIREF
SelectQuery               ::= SelectClause _ DatasetClause* _ WhereClause _ SolutionModifier
SubSelect                 ::= SelectClause _ WhereClause _ SolutionModifier _ ValuesClause
SelectClause              ::= 'SELECT' _ ( 'DISTINCT' | 'REDUCED' )? _ ( ( Var | ( '(' _ Expression 'AS' Var _ ')' ) )+ | '*' )
ConstructQuery            ::= 'CONSTRUCT' _ ( ConstructTemplate _ DatasetClause* _ WhereClause _ SolutionModifier | DatasetClause* _ 'WHERE' _ '{' _ TriplesTemplate? _ '}' _ SolutionModifier )
DescribeQuery             ::= 'DESCRIBE' _ ( VarOrIri+ | '*' ) _ DatasetClause* _ WhereClause? _ SolutionModifier
AskQuery                  ::= 'ASK' _ DatasetClause* _ WhereClause _ SolutionModifier
DatasetClause             ::= 'FROM' _ ( DefaultGraphClause | NamedGraphClause )
DefaultGraphClause        ::= SourceSelector
NamedGraphClause          ::= 'NAMED' _ SourceSelector
SourceSelector            ::= iri
WhereClause               ::= 'WHERE'? _ GroupGraphPattern
SolutionModifier          ::= GroupClause? _ HavingClause? _ OrderClause? _ LimitOffsetClauses?
GroupClause               ::= 'GROUP' _ 'BY' _ GroupCondition+
GroupCondition            ::= BuiltInCall | FunctionCall | '(' _ Expression _ ( _ 'AS' _ Var _ )? _ ')' | Var
HavingClause              ::= 'HAVING' _ HavingCondition+
HavingCondition           ::= Constraint
OrderClause               ::= 'ORDER' _ 'BY' _ OrderCondition+
OrderCondition            ::= ( ( 'ASC' | 'DESC' ) _ BrackettedExpression ) | ( Constraint | Var )
LimitOffsetClauses        ::= LimitClause _ OffsetClause? | OffsetClause _ LimitClause?
LimitClause               ::= 'LIMIT' _ INTEGER
OffsetClause              ::= 'OFFSET' _ INTEGER
ValuesClause              ::= ( 'VALUES' _ DataBlock )?
Update                    ::= Prologue _ ( Update1 ( _ ';' _ Update )? )?
Update1                   ::= Load | Clear | Drop | Add | Move | Copy | Create | InsertData | DeleteData | DeleteWhere | Modify
Load                      ::= 'LOAD' _ 'SILENT'? _ iri _ ( 'INTO' _ GraphRef )?
Clear                     ::= 'CLEAR' _ 'SILENT'? _ GraphRefAll
Drop                      ::= 'DROP' _ 'SILENT'? _ GraphRefAll
Create                    ::= 'CREATE' _ 'SILENT'? _ GraphRef
Add                       ::= 'ADD' _ 'SILENT'? _ GraphOrDefault _ 'TO' _ GraphOrDefault
Move                      ::= 'MOVE' _ 'SILENT'? _ GraphOrDefault _ 'TO' _ GraphOrDefault
Copy                      ::= 'COPY' _ 'SILENT'? _ GraphOrDefault _ 'TO' _ GraphOrDefault
InsertData                ::= 'INSERT DATA' _ QuadData
DeleteData                ::= 'DELETE DATA' _ QuadData
DeleteWhere               ::= 'DELETE WHERE' _ QuadPattern
Modify                    ::= ( 'WITH' iri )? _ ( DeleteClause _ InsertClause? | InsertClause ) _ UsingClause* _ 'WHERE' _ GroupGraphPattern
DeleteClause              ::= 'DELETE' _ QuadPattern
InsertClause              ::= 'INSERT' _ QuadPattern
UsingClause               ::= 'USING' _ ( iri | 'NAMED' _ iri )
GraphOrDefault            ::= 'DEFAULT' | 'GRAPH'? _ iri
GraphRef                  ::= 'GRAPH' _ iri
GraphRefAll               ::= GraphRef | 'DEFAULT' | 'NAMED' | 'ALL'
QuadPattern               ::= '{' _ Quads _ '}'
QuadData                  ::= '{' _ Quads _ '}'
Quads                     ::= TriplesTemplate? _ ( QuadsNotTriples _ '.'? _ TriplesTemplate? )*
QuadsNotTriples           ::= 'GRAPH' _ VarOrIri _ '{' _ TriplesTemplate? _ '}'
TriplesTemplate           ::= TriplesSameSubject _ ( '.' _ TriplesTemplate? )?
GroupGraphPattern         ::= '{' _ ( SubSelect | GroupGraphPatternSub ) _ '}'
GroupGraphPatternSub      ::= TriplesBlock? _ ( GraphPatternNotTriples _ '.'? _ TriplesBlock? )*
TriplesBlock              ::= TriplesSameSubjectPath _ ( '.' _ TriplesBlock? )?
GraphPatternNotTriples    ::= GroupOrUnionGraphPattern | OptionalGraphPattern | MinusGraphPattern | GraphGraphPattern | ServiceGraphPattern | Filter | Bind | InlineData
OptionalGraphPattern      ::= 'OPTIONAL' _ GroupGraphPattern
GraphGraphPattern         ::= 'GRAPH' _ VarOrIri _ GroupGraphPattern
ServiceGraphPattern       ::= 'SERVICE' _ 'SILENT'? _ VarOrIri _ GroupGraphPattern
Bind                      ::= 'BIND' _ '(' _ Expression _ 'AS' _ Var _ ')'
InlineData                ::= 'VALUES' _ DataBlock
DataBlock                 ::= InlineDataOneVar | InlineDataFull
InlineDataOneVar          ::= Var _ '{' _ DataBlockValue* _ '}'
InlineDataFull            ::= ( NIL | '(' _ Var* _ ')' ) _ '{' ( _ '(' _ DataBlockValue* _ ')' | NIL )* _ '}'
DataBlockValue            ::= iri | RDFLiteral | NumericLiteral | BooleanLiteral | 'UNDEF'
MinusGraphPattern         ::= 'MINUS' _ GroupGraphPattern
GroupOrUnionGraphPattern  ::= GroupGraphPattern _ ( 'UNION' _ GroupGraphPattern )*
Filter                    ::= 'FILTER' _ Constraint
Constraint                ::= BrackettedExpression | BuiltInCall | FunctionCall
FunctionCall              ::= iri _ ArgList
ArgList                   ::= NIL | '(' _ 'DISTINCT'? _ Expression _ ( ',' _ Expression )* _ ')'
ExpressionList            ::= NIL | '(' _ Expression _ ( ',' _ Expression )* _ ')'
ConstructTemplate         ::= '{' _ ConstructTriples? _ '}'
ConstructTriples          ::= TriplesSameSubject _ ( '.' _ ConstructTriples? )?
TriplesSameSubject        ::= VarOrTerm _ PropertyListNotEmpty | TriplesNode _ PropertyList
PropertyList              ::= PropertyListNotEmpty?
PropertyListNotEmpty      ::= Verb _ ObjectList ( _ ';' _ ( Verb _ ObjectList )? )*
Verb                      ::= VarOrIri | 'a'
ObjectList                ::= Object _ ( ',' _ Object )*
Object                    ::= GraphNode
TriplesSameSubjectPath    ::= VarOrTerm _ PropertyListPathNotEmpty | TriplesNodePath _ PropertyListPath
PropertyListPath          ::= PropertyListPathNotEmpty?
PropertyListPathNotEmpty  ::= ( VerbPath | VerbSimple ) _ ObjectListPath ( _ ';' ( ( VerbPath | VerbSimple ) _ ObjectList )? )*
VerbPath                  ::= Path
VerbSimple                ::= Var
ObjectListPath            ::= ObjectPath _ ( ',' _ ObjectPath )*
ObjectPath                ::= GraphNodePath
Path                      ::= PathAlternative
PathAlternative           ::= PathSequence _ ( '|' _ PathSequence )*
PathSequence              ::= PathEltOrInverse _ ( '/' _ PathEltOrInverse )*
PathElt                   ::= PathPrimary _ PathMod?
PathEltOrInverse          ::= PathElt | '^' _ PathElt
PathMod                   ::= '?' | '*' | '+'
PathPrimary               ::= iri | 'a' | '!' _ PathNegatedPropertySet | '(' _ Path ')'
PathNegatedPropertySet    ::= PathOneInPropertySet | '(' _ ( PathOneInPropertySet ( _ '|' _ PathOneInPropertySet )* )? _ ')'
PathOneInPropertySet      ::= iri | 'a' | '^' _ ( iri | 'a' )
Integer                   ::= INTEGER
TriplesNode               ::= Collection | BlankNodePropertyList
BlankNodePropertyList     ::= '[' _ PropertyListNotEmpty _ ']'
TriplesNodePath           ::= CollectionPath | BlankNodePropertyListPath
BlankNodePropertyListPath ::= '[' _ PropertyListPathNotEmpty _ ']'
Collection                ::= '(' _ GraphNode+ _ ')'
CollectionPath            ::= '(' _ GraphNodePath+ _ ')'
GraphNode                 ::= VarOrTerm | TriplesNode
GraphNodePath             ::= VarOrTerm | TriplesNodePath
VarOrTerm                 ::= Var | GraphTerm
VarOrIri                  ::= Var | iri
Var                       ::= VAR1 | VAR2
GraphTerm                 ::= iri | RDFLiteral | NumericLiteral | BooleanLiteral | BlankNode | NIL
Expression                ::= ConditionalOrExpression
ConditionalOrExpression   ::= ConditionalAndExpression _ ( '||' _ ConditionalAndExpression )*
ConditionalAndExpression  ::= ValueLogical _ ( '&&' _ ValueLogical )*
ValueLogical              ::= RelationalExpression
RelationalExpression      ::= NumericExpression _ ( '=' _ NumericExpression | '!=' _ NumericExpression | '<' _ NumericExpression | '>' _ NumericExpression | '<=' _ NumericExpression | '>=' _ NumericExpression | 'IN' _ ExpressionList | 'NOT' _ 'IN' _ ExpressionList )?
NumericExpression         ::= AdditiveExpression
AdditiveExpression        ::= MultiplicativeExpression _ ( '+' _ MultiplicativeExpression | '-' _ MultiplicativeExpression | ( NumericLiteralPositive | NumericLiteralNegative ) ( ( '*' _ UnaryExpression ) | ( '/' _ UnaryExpression ) )* )*
MultiplicativeExpression  ::= UnaryExpression ( '*' UnaryExpression | '/' UnaryExpression )*
UnaryExpression           ::= '!' _ PrimaryExpression | '+' _ PrimaryExpression | '-' _ PrimaryExpression | PrimaryExpression
PrimaryExpression         ::= BrackettedExpression | BuiltInCall | iriOrFunction | RDFLiteral | NumericLiteral | BooleanLiteral | Var
BrackettedExpression      ::= '(' _ Expression _ ')'
BuiltInCall               ::= Aggregate
                            | 'STR' '(' Expression ')'
                            | 'LANG' '(' Expression ')'
                            | 'LANGMATCHES' '(' Expression ',' Expression ')'
                            | 'DATATYPE' '(' Expression ')'
                            | 'BOUND' '(' Var ')'
                            | 'IRI' '(' Expression ')'
                            | 'URI' '(' Expression ')'
                            | 'BNODE' ( '(' Expression ')' | NIL )
                            | 'RAND' NIL
                            | 'ABS' '(' Expression ')'
                            | 'CEIL' '(' Expression ')'
                            | 'FLOOR' '(' Expression ')'
                            | 'ROUND' '(' Expression ')'
                            | 'CONCAT' ExpressionList
                            | SubstringExpression
                            | 'STRLEN' '(' Expression ')'
                            | StrReplaceExpression
                            | 'UCASE' '(' Expression ')'
                            | 'LCASE' '(' Expression ')'
                            | 'ENCODE_FOR_URI' '(' Expression ')'
                            | 'CONTAINS' '(' Expression ',' Expression ')'
                            | 'STRSTARTS' '(' Expression ',' Expression ')'
                            | 'STRENDS' '(' Expression ',' Expression ')'
                            | 'STRBEFORE' '(' Expression ',' Expression ')'
                            | 'STRAFTER' '(' Expression ',' Expression ')'
                            | 'YEAR' '(' Expression ')'
                            | 'MONTH' '(' Expression ')'
                            | 'DAY' '(' Expression ')'
                            | 'HOURS' '(' Expression ')'
                            | 'MINUTES' '(' Expression ')'
                            | 'SECONDS' '(' Expression ')'
                            | 'TIMEZONE' '(' Expression ')'
                            | 'TZ' '(' Expression ')'
                            | 'NOW' NIL
                            | 'UUID' NIL
                            | 'STRUUID' NIL
                            | 'MD5' '(' Expression ')'
                            | 'SHA1' '(' Expression ')'
                            | 'SHA256' '(' Expression ')'
                            | 'SHA384' '(' Expression ')'
                            | 'SHA512' '(' Expression ')'
                            | 'COALESCE' ExpressionList
                            | 'IF' '(' Expression ',' Expression ',' Expression ')'
                            | 'STRLANG' '(' Expression ',' Expression ')'
                            | 'STRDT' '(' Expression ',' Expression ')'
                            | 'sameTerm' '(' Expression ',' Expression ')'
                            | 'isIRI' '(' Expression ')'
                            | 'isURI' '(' Expression ')'
                            | 'isBLANK' '(' Expression ')'
                            | 'isLITERAL' '(' Expression ')'
                            | 'isNUMERIC' '(' Expression ')'
                            | RegexExpression
                            | ExistsFunc
                            | NotExistsFunc
RegexExpression   ::=   'REGEX' '(' Expression ',' Expression ( ',' Expression )? ')'
SubstringExpression   ::=   'SUBSTR' '(' Expression ',' Expression ( ',' Expression )? ')'
StrReplaceExpression   ::=   'REPLACE' '(' Expression ',' Expression ',' Expression ( ',' Expression )? ')'
ExistsFunc   ::=   'EXISTS' GroupGraphPattern
NotExistsFunc   ::=   'NOT' 'EXISTS' GroupGraphPattern
Aggregate   ::=     'COUNT' '(' 'DISTINCT'? ( '*' | Expression ) ')'
  | 'SUM' '(' 'DISTINCT'? Expression ')'
  | 'MIN' '(' 'DISTINCT'? Expression ')'
  | 'MAX' '(' 'DISTINCT'? Expression ')'
  | 'AVG' '(' 'DISTINCT'? Expression ')'
  | 'SAMPLE' '(' 'DISTINCT'? Expression ')'
  | 'GROUP_CONCAT' '(' 'DISTINCT'? Expression ( ';' 'SEPARATOR' '=' String )? ')'
iriOrFunction   ::=   iri ArgList?
RDFLiteral   ::=   String ( LANGTAG | ( '^^' iri ) )?
NumericLiteral   ::=   NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative
NumericLiteralUnsigned   ::=   INTEGER | DECIMAL | DOUBLE
NumericLiteralPositive   ::=   INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE
NumericLiteralNegative   ::=   INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE
BooleanLiteral   ::=   'true' | 'false'
String   ::=   STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
iri   ::=   IRIREF | PrefixedName
PrefixedName   ::=   PNAME_LN | PNAME_NS
BlankNode   ::=   BLANK_NODE_LABEL | ANON

IRIREF   ::=   '<' (#"[^<>\"{}|^`\\\u0000-\u0020]")* '>'
PNAME_NS   ::=   PN_PREFIX? ':'
PNAME_LN   ::=   PNAME_NS PN_LOCAL
BLANK_NODE_LABEL   ::=   '_:' ( PN_CHARS_U | #"[0-9]" ) ((PN_CHARS|'.')* PN_CHARS)?
VAR1   ::=   '?' VARNAME
VAR2   ::=   '$' VARNAME
LANGTAG   ::=   '@' #"[a-zA-Z]+" ('-' #"[a-zA-Z0-9]+")*
INTEGER   ::=   #"[0-9]+"
DECIMAL   ::=   #"[0-9]*" '.' #"[0-9]+"
DOUBLE   ::=   #"[0-9]+" '.' #"[0-9]*" EXPONENT | '.' (#"[0-9]")+ EXPONENT | (#"[0-9]")+ EXPONENT
INTEGER_POSITIVE   ::=   '+' INTEGER
DECIMAL_POSITIVE   ::=   '+' DECIMAL
DOUBLE_POSITIVE   ::=   '+' DOUBLE
INTEGER_NEGATIVE   ::=   '-' INTEGER
DECIMAL_NEGATIVE   ::=   '-' DECIMAL
DOUBLE_NEGATIVE   ::=   '-' DOUBLE
EXPONENT   ::=   #"[eE]" #"[+-]?" #"[0-9]+"
STRING_LITERAL1   ::=   "'" ( (#"[^\u0027\u005C\u000A\u000D]") | ECHAR )* "'"
STRING_LITERAL2   ::=   "\"" ( (#"[^\u0022\u005C\u000A\u000D]") | ECHAR )* "\""
STRING_LITERAL_LONG1   ::=   "'''" ( ( "'" | "''" )? ( #"[^'\\]" | ECHAR ) )* "'''"
STRING_LITERAL_LONG2   ::=   "\"\"\"" ( ( "\"" | "\"\"" )? ( #"[^\"\\]" | ECHAR ) )* "\"\"\""
ECHAR   ::=   '\\' #"[tbnrf\"']"
NIL   ::=   '(' WS* ')'
WS   ::=   "\u0020" | "\u0009" | "\u000D" | "\u000A"
ANON   ::=   '[' WS* ']'
PN_CHARS_BASE   ::=   #"[A-Z]" | #"[a-z]" | #"[\u00C0-\u00D6]" | #"[\u00D8-\u00F6]" | #"[\u00F8-\u02FF]" | #"[\u0370-\u037D]" | #"[\u037F-\u1FFF]" | #"[\u200C-\u200D]" | #"[\u2070-\u218F]" | #"[\u2C00-\u2FEF]" | #"[\u3001-\uD7FF]" | #"[\uF900-\uFDCF]" | #"[\uFDF0-\uFFFD]" | #"[\u10000-\uEFFFF]"
PN_CHARS_U   ::=   PN_CHARS_BASE | '_'
VARNAME   ::=   ( PN_CHARS_U | #"[0-9]" ) ( PN_CHARS_U | #"[0-9]" | "\\u00B7" | #"[\u0300-\u036F]" | #"[\u203F-\u2040]" )*
PN_CHARS   ::=   PN_CHARS_U | '-' | #"[0-9]" | "\u00B7" | #"[\u0300-\u036F]" | #"[\u203F-\u2040]"
PN_PREFIX   ::=   PN_CHARS_BASE ((PN_CHARS | '.' )* PN_CHARS)?
PN_LOCAL   ::=   (PN_CHARS_U | ':' | #"[0-9]" | PLX ) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX) )?
PLX   ::=   PERCENT | PN_LOCAL_ESC
PERCENT   ::=   '%' HEX HEX
HEX   ::=   #"[0-9]" | #"[A-F]" | #"[a-f]"
PN_LOCAL_ESC   ::=   '\\' ( '_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%' )
_ ::= #"[\s\t\n\r\f]*"