* Configuring Drafter

Drafter uses [[https://github.com/weavejester/environ][environ]] for its configuration.  This means it uses
environment variables (and/or java properties) to pass configuration
variables from the environment.

** Backends

Drafter supports multiple backends for storing RDF data.

#+BEGIN_EXAMPLE
DRAFTER_BACKEND               (default drafter.backend.sesame.native)
#+END_EXAMPLE

| Namespace                      | Description                                                      |
|--------------------------------+------------------------------------------------------------------|
| drafter.backend.sesame.native  | Sesame Native Store Backend                                      |
| drafter.backend.stardog.sesame | Stardog optimised queries via the Sesame SparqlRepository client |

Different backends have their own configuration options. There are also common
configuration settings which apply across all backends:

#+BEGIN_EXAMPLE
DRAFTER_HTTP_PORT:            (default 3001)
DRAFTER_BATCHED_WRITE_SIZE:   (default 10000)
#+END_EXAMPLE

*** drafter.backend.sesame.native

The Sesame native backend stores the data in a Sesame native repository backed by files on a local disk. The location
of the data directory and the indexes to create can be configured:

#+BEGIN_EXAMPLE
DRAFTER_INDEXES
DEFAULT_REPO_PATH
#+END_EXAMPLE

*** drafter.backend.stardog.sesame

The Sesame stardog backend accesses a remote Stardog instance through a Sesame SPARQL repository. The location of the
query and update endpoints for the Stardog database to use must be configured.

#+BEGIN_EXAMPLE
SPARQL_QUERY_ENDPOINT         REQUIRED http://$STARDOG_PORT_5820_TCP_ADDR:5820/${DATABASE_NAME:-pmd-data}/query
SPARQL_UPDATE_ENDPOINT        REQUIRED http://$STARDOG_PORT_5820_TCP_ADDR:5820/${DATABASE_NAME:-pmd-data}/update
#+END_EXAMPLE

** Examples

Some examples of supplying these properties are provided below:

As environment variables via lein run:

#+BEGIN_SRC shell :exports code
$ env DRAFTER_HTTP_PORT=3040 DRAFTER_REPO_PATH=/var/drafter-db lein run
#+END_SRC

As java properties via a built application jar:

#+BEGIN_SRC shell :exports code
$ java -Ddrafter.http.port=3050 -Ddrafter.repo.path=./drafter-database -jar target/drafter-0.1.0-SNAPSHOT-standalone.jar
#+END_SRC

As environment variables via a built application jar:

#+BEGIN_SRC shell :exports code
$ env DRAFTER_HTTP_PORT=3050 DRAFTER_REPO_PATH=./drafter-database java -jar target/drafter-0.1.0-SNAPSHOT-standalone.jar
#+END_SRC

** Configuring Timeouts

SPARQL queries may require a long time to be evaluated, so to maintain the
availability of the server, each SPARQL endpoint can be configured with various
timeouts. There are two timeouts associated with each running query - the time
between generated results, and the total time for the entire query. If either of
these two timeouts are exceeded by a query, it will be cancelled by the
server. Each SPARQL route in Drafter may have two associated endpoints - a query
endpoint and an update endpoint. Therefore there are three elements to the
timeouts for each SPARQL query:

- The name of the endpoint
- Whether the endpoint is for updates or queries
- The timeouts for the next result and the total operation

By default, all endpoints have a timeout of 60 seconds to produce the next query
result, and 4 minutes for the entire operation.

Individual timeouts, or groups of timeouts can be specified by defining an
environment variable in a particular format with a value for the number of
seconds to set the corresponding timeout(s) to. There are three components to
the variable name - each of these components are optional and if a component is
omitted then it matches every timeout for that component. For example if the
endpoint name is omitted then the timeout applies for every endpoint in the
database. The format of variable names is:

#+BEGIN_SRC shell :exports code
DRAFTER_TIMEOUT[_(UPDATE|QUERY)][_(ENDPOINT_name)][_(RESULT|OPERATION)]
#+END_SRC

It is anticipated that components on the right are more likely to be configured
than those on the left i.e. query RESULT timeouts are likely to be configured
while settings for UPDATE or QUERY endpoints are less likely.

1. UPDATE applies to all update endpoints while QUERY to all query endpoints
2. ENDPOINT\_name applies to the endpoint with name 'name' e.g. ENDPOINT\_LIVE or ENDPOINT\_RAW
3. RESULT specifies the timeout to produce the next result while OPERATION applies to the entire query operation.

Note that since update queries to not produce intermediate results, specifying
UPDATE and RESULT in the same setting has no effect and results in a warning
being logged.

Multiple timeout variables can be configured at once and these will be applied
in order so more specific timeout settings can be applied to override more
general ones. RESULT/OPERATION settings are considered least specific,
UPDATE/QUERY settings are the next, while individual endpoint settings are the
most specific. This means that variables which specify RESULT or OPERATION
timeouts will be applied before those for UPDATE or QUERY operations which are
in turn are applied before any endpoint-specific settings. If a variable
specifies multiple timeout components then these orderings are applied in turn
e.g.  endpoint OPERATION timeouts are applied before endpoint QUERY timeouts. On
startup, Drafter logs timeout settings in the order they are applied.

*** Timeout examples

To set the default timeout across all endpoints to 30 seconds:

#+BEGIN_SRC shell :exports code
DRAFTER_TIMEOUT=30
#+END_SRC

To set the result timeout for all queries to 20 seconds:

#+BEGIN_SRC shell :exports code
DRAFTER_TIMEOUT_RESULT=20
#+END_SRC

To set the timeout for all live endpoints to 45 seconds:

#+BEGIN_SRC shell :exports code
DRAFTER_TIMEOUT_ENDPOINT_LIVE=45
#+END_SRC

To set the result timeout for all queries on the raw endpoint to 2 minutes:

#+BEGIN_SRC shell :exports code
DRAFTER_TIMEOUT_ENDPOINT_RAW_RESULT=120
#+END_SRC

To set the default result timeout to 30 seconds and the total timeout for
updates on the live endpoint to 1 minute:

#+BEGIN_SRC shell :exports code
DRAFTER_TIMEOUT_RESULT=30
DRAFTER_TIMEOUT_UPDATE_ENDPOINT_LIVE_OPERATION=60
#+END_SRC

To set the default operation timeout to 50 seconds except the raw endpoint which
is 3 minutes:

#+BEGIN_SRC shell :exports code
DRAFTER_TIMEOUT_OPERATION=50
DRAFTER_TIMEOUT_ENDPOINT_RAW_OPERATION=180
#+END_SRC

** User Token Signing Key

Drafter can be configured to authenticated users from a JSON Web Signing (JWS) token in the incoming request.
This token must be signed using the configured HMAC-SHA-256 key. This key should be specified by the
DRAFTER_JWS_SIGNING_KEY environment variable:

#+BEGIN_SRC shell :exports code
DRAFTER_JWS_SIGNING_KEY=secretkey
#+END_SRC 

If the DRAFTER_JWS_SIGNING_KEY environment variable is not present, JWS token authentication will not be
available.

** System Properties

The following JVM system properties can be set to configure various
aspects of drafter.  This is not necessarily an exhaustive list:

| Property            | Default Value | Description                                                                                                                                                                |
|---------------------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| http.maxConnections | 20?           | The maximum number of HTTP connections allowed inside Apache HTTP Client instances.  Use this to configure the connection pool size inside our Sesame SPARQLRepository, if using drafter against a remote store. |
